+ HDF5 shared library linking
+ HDF5 git host
+ Project git host
+ Read metal texture as image
+ Save figures images
/ Time series for binary torques
+ Colormap view
+ Create FileView base with isInterestedInFile, displayFile methods
+ Factor main component to use a collection of FileView instances
- Write filesystem notification singleton
+ Write async file loading
+ Create application commands for views, instead of keyPressed
- Multiple tabs and/or split view
+ Show/hide the directory tree
+ Draw mouse position in status bar
/ Sort/filter directory tree items
+ Option to preserve figure aspect ratio
+ Move commands from binary torques to file based view
- LaTeX via node mathjax or system TeX
+ Work out robust logic for multi-figure pages
/ Write proper quadmesh artist and factories
+ Display viewer name in status bar


+ Multiple viewers per file, allow to select from status bar
+ Add file patterns to extension view
+ Preserve environment between extension view reconfigs
+ Handle async kernel resolves
	+ Write TaskPool
	+ Make kernel updates take CallAdapter instance rather than class
	+ Pass bailout checker through runtime methods
	+ Indicate expensive (async updated) symbols in YAML
	+ Defer async updates in kernel resolves; resume on task completion
/ File events trigger reloads, reconfigs, directory tree refresh


/ Improve figure margin editing with "one-way" resize border
- Figure zoom-to-content-extent command
- Figure legends
- Figure color cycles for line plots
- Figure log scaling
+ Create type-safe GPU buffer objects, change RenderingSurface to use them
  Then data can be moved to the GPU on a background thread, and we can forego
  the complexity of cacheing GPU buffers based on their std::vector<simd>
  data.


+ Expose gradient artist to runtime
- Expose mesh helper methods to runtime
- Start documenting the runtime API
- Decide on a way to present API docs in the app
- Write variant mini-viewer: show callout from environment view
- Ascii loader
